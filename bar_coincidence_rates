#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jul  6 15:11:49 2018

@author: annagriffith
"""

# produces graphs of rates in each bar channel. Either the actual rates, coincidence rates with a channel of choice or predicted coincidence rates. Currently set to zoom into x= 0-200 values.

from ROOT import TTree, TFile, TCanvas
from array import array
from ROOT import *
from glob import glob

c1 = TCanvas('c1','The Ntuple canvas',100,10,700,780)
c1.SetLogy()
runtime = 0

run = str(raw_input('Run to plot: '))
if run == '836':
    files = glob("Run836_singleChannel10mVCH24/UX5MilliQan_Run*_singleChannel10mVCH24.root")
    runtime = 0.09*60*60
elif run == '837':
    files = glob("Run837_singleChannel100mVCH24/UX5MilliQan_Run*_singleChannel100mVCH24.root")
    runtime = 0.11*60*60
elif run == '838':
    files = glob("Run838_singleChannel10mVCH16/UX5MilliQan_Run*_singleChannel10mVCH16.root")
    runtime = 0.09*60*60
elif run == '839':
    files = glob("Run839_singleChannel100mVCH16/UX5MilliQan_Run*_singleChannel100mVCH16.root")
    runtime = 0.2*60*60
elif run == '840':
    files = glob("Run840_singleChannel10mVCH22/UX5MilliQan_Run*_singleChannel10mVCH22.root")
    runtime = 0.8*60*60
elif run == '841':
    files = glob("Run841_singleChannel100mVCH22/UX5MilliQan_Run*_singleChannel100mVCH22.root")
    runtime = 0.66*60*60
elif run == '843':
    files = glob("Run843_muoncut.root")
    runtime = 194*60*60
elif run == '1345':
    files = glob("Run1345_software/UX5MilliQan_Run*_software_v14.root")
    runtime = 6.5*60*60
elif run == '1346':
    files = glob("Run1346_Physics/UX5MilliQan_Run*_Physics_v14.root")
    runtime = 51.8*60*60


chain = TChain("t")
for f in files:
    chain.Add(f)

coin = str(raw_input('Plot rates of coincidence? (yes,no,predicted): '))
if coin == 'predicted':
#chan1 = int(raw_input('Plot predicted coincidences in channel: '))
    chan2 = int(raw_input('Requiring events in channel: '))
if coin == 'yes':
#chan1 = int(raw_input('Plot coincidences in channel: '))
    chan2 = int(raw_input('Requiring events in channel: '))
    cutlevel = str(input('Set a cut level: '))

#naming- "zoom" since only the initial part of the histogram is plotted
#         "Run" which run is plotted
#         "rate_chan" rate is plotted in specified channel
#         "reqchan" requiring events in the following channel
#         specifies whether the rate, coincidence rate or predicted coincidence rate is plotted, with associated height requirement (cutlevel)

def pprint_chan(run, coin, i, chan2):
        return "zoomRun"+str(run)+"_rate_chan" + str(i)+"_reqchan"+str(chan2) +"predictedcoincidence.pdf"

def cprint_chan(run, coin, chan1, chan2, cutlevel):
    return "zoomRun"+str(run)+"_rate_chan" + str(chan1)+"_reqchan"+str(chan2) +"coincidence_"+str(coin)+str(cutlevel)+".pdf"

def print_chan(i,run):
        return "zoomRun"+str(run)+"_rate_chan" + str(i) +".pdf"


def h(i):
    hi = "h"+str(i)
    return hi

hlist=[0.0]*26

#if coin == "yes":
#    bars = [chan1]
#else:
bars = [0,1,24,25,8,9,6,7,16,17,12,13,2,3,22,23,4,5]

for i in bars:

    chan1 = i
    def select_chan(i):
        return "chan == " + str(i)

    def cut_chan(i,coin):
        if coin != "yes":
            return "chan == " + str(i)
        else:

            def cut(chan,cutlevel):
                return 'MaxIf$(height,chan==' + str(chan) + ')>' +str(cutlevel)
            cut_chan2 = cut(chan2,cutlevel)
            c_chan2 = TCut(cut_chan2)
            cut_title = "chan ==" + str(i)
            cut = TCut(cut_title)
            cut += c_chan2
            return cut


    hi = "h"+str(i)
    h = TH1F(hi, select_chan(i), 140, 0, 1400)
    chain.Draw("Max$(height)>>"+hi, cut_chan(i,coin))

    def Int_bin(h, j):
        tot = runtime
        bin = float(h.Integral(j,140))
        Int = float(bin/tot)
        return Int

    hri = "hr"+str(i)
    hr = TH1F(hri, select_chan(i), 20,0,200)
    entry = [0]*20

    for j in range (0,20):
        entry[j] = Int_bin(h, j)
        hr.Fill(j*10,entry[j])
        hr.SetBinError(j+1,0)

    hlist[i] = hr

    if coin == 'no':
        hlist[i].GetXaxis().SetTitle('Threshold (mV)')
        hlist[i].GetYaxis().SetTitle('Rate (Hz)')
        hlist[i].Draw("box")
        c1.Print(print_chan(i,run))
    if coin == 'yes':
        hlist[i].GetXaxis().SetRange(0,200)
        hlist[i].GetXaxis().SetTitle('Threshold (mV)')
        hlist[i].GetYaxis().SetTitle('Rate (Hz)')
        hlist[i].Draw("box")

        c1.Print(cprint_chan(run,coin, chan1, chan2, cutlevel))

if coin == 'predicted':
    for i in bars:
        h_coin = TH1F("h_coin", "coincidence rate", 20,0,200)
        h_coin = hlist[i].Clone("h_coin")
        h_coin.Multiply(hlist[chan2])
        h_coin.Scale(1280E-9)
        h_coin.GetXaxis().SetTitle('Threshold (mV)')
        h_coin.GetYaxis().SetTitle('Rate (Hz)')
        h_coin.Draw("box")

        c1.Print(pprint_chan(run,coin, i, chan2))

